plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.gorylenko.gradle-git-properties" version "2.4.1" //git info
}

group = 'com.my'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.apache.commons:commons-lang3'															// lang3
	implementation 'org.springframework.boot:spring-boot-starter-security'										// Spring Security
	implementation 'org.apache.commons:commons-collections4'													// collections
	implementation 'org.modelmapper:modelmapper:3.2.1'															// ModelMapper
	implementation 'org.springframework.boot:spring-boot-starter-validation'									// dto validate
	implementation 'org.apache.commons:commons-collections4:4.5.0-M2'
	/* flyway */
	implementation group: 'org.flywaydb', name: 'flyway-core', version: '10.10.0'
	implementation group: 'org.flywaydb', name: 'flyway-mysql', version: '10.10.0'
	implementation 'org.springframework.boot:spring-boot-starter-aop'											// aop
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

	/* AWS SDK for S3 */
	implementation 'software.amazon.awssdk:s3:2.20.35'
	implementation 'io.awspring.cloud:spring-cloud-aws-starter:3.1.1'

	// WebTestClient (if applicable)
	testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	//Querydsl 추가
	implementation 'com.querydsl:querydsl-jpa:5.1.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework:spring-webflux'

	// test code lombok
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'		// marid db 사용하지 않을 시 삭제
	runtimeOnly 'com.h2database:h2'

	// jwt
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
}

// Querydsl 빌드 옵션 (옵셔널)
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile) {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}

tasks.named('test') {
	useJUnitPlatform()
}

springBoot {
	buildInfo()
}